name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - run: cargo test --release

  publish-crates:
    name: Publish to crates.io
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CRATES: llmcc-core llmcc-rust llmcc-python llmcc llmcc-bindings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - name: Publish crates
        env:
          TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          for crate in $CRATES; do
            echo "Publishing $crate..."
            cargo publish -p "$crate" --token "$TOKEN"
            sleep 10
          done

  publish-wheels:
    name: Publish wheels
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish wheels (no sdist)
        if: matrix.os != 'ubuntu-latest'
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: publish
          args: --release --find-interpreter --skip-existing --no-sdist
          sccache: 'true'
      - name: Publish wheels and sdist
        if: matrix.os == 'ubuntu-latest'
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: publish
          args: --release --find-interpreter --skip-existing
          sccache: 'true'

  build-binaries:
    name: Build binaries
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - name: Build llmcc binary
        run: cargo build --release --bin llmcc
      - name: Package binary artifact
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          case "${RUNNER_OS}" in
            Windows)
              SRC="target/release/llmcc.exe"
              DEST="artifacts/llmcc-${{ matrix.os }}.exe"
              ;;
            macOS|Linux)
              SRC="target/release/llmcc"
              DEST="artifacts/llmcc-${{ matrix.os }}"
              ;;
            *)
              echo "Unsupported runner OS: ${RUNNER_OS}"
              exit 1
              ;;
          esac
          if [ ! -f "${SRC}" ]; then
            echo "Expected binary not found at ${SRC}"
            exit 1
          fi
          cp "${SRC}" "${DEST}"
      - uses: actions/upload-artifact@v4
        with:
          name: llmcc-binary-${{ matrix.os }}
          path: artifacts/*

  collect-artifacts:
    name: Collect all artifacts
    needs: [publish-crates, publish-wheels, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Determine version
        id: version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: binary-artifacts
      - name: Prepare artifact directory
        run: |
          mkdir -p final-dist
          find binary-artifacts -type f -exec mv {} final-dist/ \;
      - name: Download Python distributions from PyPI
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip download "llmcc==${{ steps.version.outputs.version }}" --dest final-dist
      - uses: actions/upload-artifact@v4
        with:
          name: final-release-artifacts
          path: final-dist/*

  release:
    name: Create GitHub release
    needs: [collect-artifacts, publish-wheels]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: version
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          name: final-release-artifacts
          path: dist
      - name: Verify artifacts exist
        run: |
          echo "Artifacts to upload:"
          ls -lh dist/
          [ $(ls dist/* 2>/dev/null | wc -l) -gt 0 ] || { echo "ERROR: No artifacts found!"; exit 1; }
      - name: Create release with gh CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          gh release create "$TAG" \
            --title "Released llmcc $TAG" \
            --notes "Published to crates.io and PyPI" \
            dist/*
