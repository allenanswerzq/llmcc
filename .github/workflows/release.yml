name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - run: cargo test --release

  publish-crates:
    name: Publish to crates.io
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CRATES: llmcc-core llmcc-rust llmcc-python llmcc llmcc-bindings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - name: Publish crates
        env:
          TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          for crate in $CRATES; do
            echo "Publishing $crate..."
            cargo publish -p "$crate" --token "$TOKEN"
            sleep 10
          done

  build-wheels:
    name: Build wheels
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: crates/llmcc-bindings
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: crates/llmcc-bindings/dist/*.whl

  build-binaries:
    name: Build binaries
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - name: Build llmcc binary
        run: cargo build --release --bin llmcc
      - name: Package binary artifact
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          case "${RUNNER_OS}" in
            Windows)
              SRC="target/release/llmcc.exe"
              DEST="artifacts/llmcc-${{ matrix.os }}.exe"
              ;;
            macOS|Linux)
              SRC="target/release/llmcc"
              DEST="artifacts/llmcc-${{ matrix.os }}"
              ;;
            *)
              echo "Unsupported runner OS: ${RUNNER_OS}"
              exit 1
              ;;
          esac
          if [ ! -f "${SRC}" ]; then
            echo "Expected binary not found at ${SRC}"
            exit 1
          fi
          cp "${SRC}" "${DEST}"
      - uses: actions/upload-artifact@v4
        with:
          name: llmcc-binary-${{ matrix.os }}
          path: artifacts/*

  build-sdist:
    name: Build sdist
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - uses: dtolnay/rust-toolchain@stable
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: crates/llmcc-bindings
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: crates/llmcc-bindings/dist/*.tar.gz

  publish-python:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: python-artifacts
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: python-artifacts
      - name: Collect Python distributions
        run: |
          mkdir -p dist
          find python-artifacts -type f -name "*.whl" -exec mv {} dist/ \;
          find python-artifacts -type f -name "*.tar.gz" -exec mv {} dist/ \;
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist

  collect-artifacts:
    name: Collect all artifacts
    needs: [publish-crates, build-wheels, build-sdist, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      - name: Flatten artifacts
        run: |
          mkdir -p final-dist
          find all-artifacts -type f -exec mv {} final-dist/ \;
      - uses: actions/upload-artifact@v4
        with:
          name: final-release-artifacts
          path: final-dist/*

  release:
    name: Create GitHub release
    needs: [collect-artifacts, publish-python]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: version
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          name: final-release-artifacts
          path: dist
      - name: Verify artifacts exist
        run: |
          echo "Artifacts to upload:"
          ls -lh dist/
          [ $(ls dist/* 2>/dev/null | wc -l) -gt 0 ] || { echo "ERROR: No artifacts found!"; exit 1; }
      - name: Create release with gh CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          gh release create "$TAG" \
            --title "Released llmcc $TAG" \
            --notes "Published to crates.io and PyPI" \
            dist/*
