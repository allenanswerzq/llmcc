name: Python Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust for cross-compilation
        if: matrix.os == 'ubuntu-latest'
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist --find-interpreter
          sccache: 'true'
          maturin-version: 'latest'
          working-directory: crates/llmcc-bindings

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: crates/llmcc-bindings/dist/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - uses: dtolnay/rust-toolchain@stable

      - name: Build source distribution
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          maturin-version: 'latest'
          working-directory: crates/llmcc-bindings

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: crates/llmcc-bindings/dist/*.tar.gz

  test-wheels:
    needs: [build-wheels, build-sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist

      - name: Flatten dist directory
        run: |
          mkdir -p wheels
          find dist -type f -name "*.whl" -exec mv {} wheels/ \;
          rm -rf dist
          mv wheels dist

      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl

      - name: Test import
        run: |
          python -c "import llmcc_bindings; print('llmcc_bindings imported successfully')"

      - name: Run Python tests
        if: hashFiles('tests/**') != ''
        run: |
          pip install pytest pytest-cov
          pytest tests/ -v --cov=llmcc --cov-report=xml
        continue-on-error: true

  publish:
    needs: [test-wheels]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten dist directory
        run: |
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec mv {} dist/ \;
          find dist -type d -empty -delete

      - name: Extract version from tag
        id: tag_info
        run: |
          VERSION="${{ github.ref_name }}"
          # Remove 'v' prefix if present (e.g., v0.2.0 -> 0.2.0)
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          body: |
            Released llmcc version ${{ steps.tag_info.outputs.version }}

            Python wheels built for:
            - Python 3.8, 3.9, 3.10, 3.11, 3.12
            - Linux (x86_64, aarch64), macOS (x86_64, arm64), Windows (x86_64)

            Includes:
            - Rust bindings for llmcc-core, llmcc-rust, llmcc-python

            See [PyPI](https://pypi.org/project/llmcc/) for details.
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
