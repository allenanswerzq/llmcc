name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-rust:
    name: Test Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --all-targets --workspace

      - name: Run clippy
        run: cargo clippy --all-targets --workspace -- -D warnings

      - name: Check formatting
        run: cargo fmt --all -- --check

  test-python:
    name: Test Python (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: swatinem/rust-cache@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Get Python configuration (macOS)
        if: runner.os == 'macOS'
        run: |
          PYTHON_PATH=$(python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
          PYTHON_LDVERSION=$(python -c "import sysconfig; print(sysconfig.get_config_var('LDVERSION'))")
          echo "LDFLAGS=-L$PYTHON_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PYTHON_PATH:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "Python LIBDIR: $PYTHON_PATH"
          echo "Python LDVERSION: $PYTHON_LDVERSION"

      - name: Get Python configuration (Linux)
        if: runner.os == 'Linux'
        run: |
          PYTHON_PATH=$(python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
          echo "LDFLAGS=-L$PYTHON_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PYTHON_PATH:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Build Python bindings
        run: |
          MACOSX_DEPLOYMENT_TARGET=11.0 uv run maturin develop --manifest-path "crates/llmcc-bindings/Cargo.toml"
        env:
          LDFLAGS: ${{ env.LDFLAGS }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}

      - name: Run Python tests
        run: |
          uv run pytest llmcc/test_basic.py -v

  lint:
    name: Lint and format checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: swatinem/rust-cache@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --workspace -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --workspace

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      MACOSX_DEPLOYMENT_TARGET: 11.0

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: swatinem/rust-cache@v2

      - name: Get Python configuration (macOS)
        if: runner.os == 'macOS'
        run: |
          PYTHON_PATH=$(python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
          echo "LDFLAGS=-L$PYTHON_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PYTHON_PATH:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Build release binaries
        run: cargo build --release --workspace --all-targets
        env:
          LDFLAGS: ${{ env.LDFLAGS }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llmcc-${{ matrix.os }}
          path: |
            target/release/llmcc${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            target/release/libllmcc*

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: swatinem/rust-cache@v2

      - uses: taiki-e/install-action@cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --workspace --out Xml --timeout 300

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false
