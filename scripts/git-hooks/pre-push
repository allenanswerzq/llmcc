#!/bin/bash
# Pre-push hook for Rust projects
# Runs comprehensive tests before pushing to ensure code quality

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║    Running pre-push quality checks     ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"

# Check if we're in the root directory
if [ ! -f "Cargo.toml" ]; then
    echo -e "${RED}Error: Cargo.toml not found. Please run this hook from the project root.${NC}"
    exit 1
fi

FAILED=0

# 1. Run tests
echo -e "\n${YELLOW}[1/4] Running tests...${NC}"
if cargo test --all --verbose 2>&1 | tee /tmp/cargo-test.log; then
    echo -e "${GREEN}✓ Tests passed${NC}"
else
    echo -e "${RED}✗ Tests failed${NC}"
    FAILED=1
fi

# 2. Run clippy with warnings as errors
echo -e "\n${YELLOW}[2/4] Running clippy...${NC}"
if cargo clippy --all-targets --workspace -- -D warnings > /dev/null 2>&1; then
    echo -e "${GREEN}✓ Clippy checks passed${NC}"
else
    echo -e "${RED}✗ Clippy found issues${NC}"
    FAILED=1
fi

# 3. Check formatting
echo -e "\n${YELLOW}[3/4] Checking code formatting...${NC}"
if cargo fmt --all -- --check > /dev/null 2>&1; then
    echo -e "${GREEN}✓ Code formatting OK${NC}"
else
    echo -e "${RED}✗ Code formatting issues found${NC}"
    FAILED=1
fi

# 4. Run doc tests
echo -e "\n${YELLOW}[4/4] Running doc tests...${NC}"
if cargo test --doc > /dev/null 2>&1; then
    echo -e "${GREEN}✓ Documentation tests passed${NC}"
else
    echo -e "${RED}✗ Documentation tests failed${NC}"
    FAILED=1
fi

# Summary
echo -e "\n${BLUE}════════════════════════════════════════${NC}"
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}All pre-push checks passed! Proceeding with push...${NC}"
    exit 0
else
    echo -e "${RED}Some checks failed. Please fix issues before pushing.${NC}"
    echo -e "${YELLOW}To skip this hook, use: git push --no-verify${NC}"
    exit 1
fi
